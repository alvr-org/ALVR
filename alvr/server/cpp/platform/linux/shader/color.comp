#version 450

layout (local_size_x = 8, local_size_y = 8, local_size_z = 1) in;
layout (binding = 0) uniform sampler2D in_img;
layout (binding = 1, rgba8) uniform writeonly image2D out_img;

layout (constant_id = 0) const float renderWidth = 0.;
layout (constant_id = 1) const float renderHeight = 0.;
layout (constant_id = 2) const float brightness = 0.;
layout (constant_id = 3) const float contrast = 0.;
layout (constant_id = 4) const float saturation = 0.;
layout (constant_id = 5) const float gamma = 0.;
layout (constant_id = 6) const float sharpening = 0.;

vec3 GetSharpenNeighborComponent(vec2 uv, float xoff, float yoff)
{
    const float sharpenNeighbourWeight = -sharpening / 8.;
    return texture(in_img, uv + vec2(xoff, yoff)).rgb * sharpenNeighbourWeight;
}

vec3 blendLighten(vec3 base, vec3 blend)
{
    return vec3(max(base.r, blend.r), max(base.g, blend.g), max(base.b, blend.b));
}

// https://forum.unity.com/threads/hue-saturation-brightness-contrast-shader.260649/
void main()
{
    ivec2 pos = ivec2(gl_GlobalInvocationID.xy);
    vec2 uv = (vec2(pos) + 0.5f) / imageSize(out_img);

    const float DX = 1. / renderWidth;
    const float DY = 1. / renderHeight;

    // sharpening
    vec3 pixel = texture(in_img, uv).rgb * (sharpening + 1.);
    pixel += GetSharpenNeighborComponent(uv, -DX, -DY);
    pixel += GetSharpenNeighborComponent(uv, 0, -DY);
    pixel += GetSharpenNeighborComponent(uv, +DX, -DY);
    pixel += GetSharpenNeighborComponent(uv, +DX, 0);
    pixel += GetSharpenNeighborComponent(uv, +DX, +DY);
    pixel += GetSharpenNeighborComponent(uv, 0, +DY);
    pixel += GetSharpenNeighborComponent(uv, -DX, +DY);
    pixel += GetSharpenNeighborComponent(uv, -DX, 0);

    pixel += brightness; // brightness
    pixel = (pixel - 0.5) * contrast + 0.5f; // contast
    pixel = blendLighten(mix(vec3(dot(pixel, vec3(0.299, 0.587, 0.114))), pixel, vec3(saturation)), pixel); // saturation + lighten only

    pixel = clamp(pixel, 0., 1.);
    pixel = pow(pixel, vec3(1. / gamma)); // gamma

    imageStore(out_img, pos, vec4(pixel, 1.));
}
