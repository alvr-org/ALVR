THIS IS FOR NVIDIA ONLY, AMD SHOULD WORK FINE
| Seperates commands from comments and anything past that shouldn't be copied into the command
# Is optional steps

Step 1, install nvidia drivers and fedora cuda driver (If done skip this step)

sudo dnf update -y | Reboot if you have a new kernel
sudo dnf install akmod-nvidia | Installing nvidia akmod driver
sudo dnf install xorg-x11-drv-nvidia-cuda | Cuda that doesn't really work but is needed

| Wait until "modinfo -F version nvidia" doesn't report "ERROR: Module nvidia not found" anymore

Step 2, install nvidia cuda

sudo dnf config-manager --add-repo https://developer.download.nvidia.com/compute/cuda/repos/fedora37/x86_64/cuda-fedora37.repo | This is for fedora 37 and will work for 38 too. If you need to use an older version, verify the version exists on the repo and change it
sudo dnf clean all
sudo dnf module disable nvidia-driver | To clarify this doesn't disable your nvidia drivers that you installed previously, but rather prevents nvidia dkms from installing over the akmod driver
sudo dnf -y install cuda
export PATH=/usr/local/cuda-12.2/bin${PATH:+:${PATH}} | Adds cuda to your path, change your cuda version if using a different version

# Optionally verify /usr/local/cuda/bin/nvcc exists. If not check if there is a /usr/local/cuda-(version) installed and check if that has nvcc too (It should)

Step 3, gcc11 install with homebrew
| Becuase cuda cannot be ran without a gcc version lower than or equal to gcc12, you will need to install a gcc version on homebrew. The fedora gcc11 package got removed so this is the only way sadly

/bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)" | Script to install homebrew, follow the instructions provided. If you change your installation path, take note of where its installed but default should work fine
brew install gcc@11 # If brew is not added to the path (brew not found) look below for what you need to add to ~/.bash_profile
# test -d ~/.linuxbrew && eval "$(~/.linuxbrew/bin/brew shellenv)"
# test -d /home/linuxbrew/.linuxbrew && eval "$(/home/linuxbrew/.linuxbrew/bin/brew shellenv)"
# test -r ~/.bash_profile && echo "eval \"\$($(brew --prefix)/bin/brew shellenv)\"" >> ~/.bash_profile
# echo "eval \"\$($(brew --prefix)/bin/brew shellenv)\"" >> ~/.profile
# Once done refresh/restart your terminal and try again

Step 4, modify dependencies.rs to use correct cuda path and gcc version

From the ALVR directory edit the ./alvr/xtask/src/dependencies.rs, and change two lines:
Line 159, change "cuda" -> "cuda-12.2" # Check that the version exists by listing all cuda directories in /usr/local/ by running ls /usr/local/ | grep "cuda"
Line 179, replace that line with "--nvccflags=\"-ccbin /home/linuxbrew/.linuxbrew/bin/g++-11 -gencode arch=compute_52,code=sm_52 -O2\"" | This uses the correct gcc version

Step 5, dependencies

sudo dnf groupinstall 'Development Tools' | For c++ and build tools
sudo dnf install yasm libdrm-devel vulkan-headers jack-audio-connection-kit-devel atk-devel gdk-pixbuf2-devel cairo-devel rust-gdk0.15-devel x264-devel vulkan-devel libunwind-devel clang
